buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
				maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
	}
}

plugins {
	id "net.minecraftforge.gradle.forge" version "2.0.2"
}

apply plugin: 'maven'

version = version_major + '.' + version_minor + '.' + version_patch + '.' + getBuildNumber()
if (project.hasProperty('buildQualifier')) {
	version = project.version + '-' + project.buildQualifier
}
group= "net.sengir.forestry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "forestry_" + mcversion

ext.dirDest = './build/dist'
ext.dirLang = "./lang"

ext.apiRedstoneFlux = "./src/api/java/cofh"

// java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
	version = mcversion + "-" + forgeversion
	runDir = "run"
	useDepAts = true
	mappings = mcp_mappings

	replace '@VERSION@', project.version
	replace '@BUILD_NUMBER@', getBuildNumber()
}

sourceSets {
	main {
		java {
			srcDir project.apiRedstoneFlux
		}
		resources {
			srcDir project.dirLang
		}
	}
}

repositories {
	maven {
		url "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
}

dependencies {
	deobfCompile "mezz.jei:jei_${mcversion}:${jei_version}"
//	deobfCompile "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
//	runtime "net.industrial-craft:industrialcraft-2:${ic2_version}:dev"
}

configurations {
	api
	compile.extendsFrom api
}

processResources {

	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '**/*.md'
	}
}

// prevent java 8's strict doclint for javadocs from failing builds
allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

jar {
	// Copy various READMEs and Licensing files into the jar
	into ('cofh/api') {
		from project.apiRedstoneFlux + "/LICENSE - LGPLv3.txt"
	}
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

task apiJar(type: Jar) {
	// TODO: when FG bug is fixed, remove allSource from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.main.allSource
	from sourceSets.main.output
	include 'forestry/api/**'
	classifier = 'api'
}

artifacts {
	archives sourcesJar
	archives apiJar
}

uploadArchives {
	repositories {
		if (project.hasProperty('mavenDir')) {
			mavenDeployer {
				repository(url: "file://"+mavenDir)
			}
		} else {
			println 'Archives upload disabled, mavenDir in gradle.properties is missing.'
		}
	}
}

def getBuildNumber() {
	return "$System.env.BUILD_NUMBER" != "null" ? "$System.env.BUILD_NUMBER" : "0"
}


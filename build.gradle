buildscript {
	repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
				maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
    }
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
	}
}

plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}

version = version_major + '.' + version_minor + '.' + version_patch + '.' + getBuildNumber()
if (project.hasProperty('buildQualifier')) {
	version = project.version + '-' + project.buildQualifier
}
group= "net.sengir.forestry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "forestry_" + mcversion

ext.dirDest = './build/dist'
ext.dirLang = "./lang"

ext.apiForestry = "./api/forestry"
ext.apiRedstoneFlux = "./api/redstoneflux"

// java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
	version = mcversion + "-" + forgeversion
	runDir = "run"
	useDepAts = true
	mappings = mcp_mappings

	replace '@VERSION@', project.version
	replace '@BUILD_NUMBER@', getBuildNumber()
}

sourceSets {
	main {
		java {
			srcDir project.apiForestry
			srcDir project.apiRedstoneFlux
			srcDir "./api/buildcraft"
		}
		resources {
			srcDir project.dirLang
		}
	}
}

repositories {
	maven {
		url "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
}

dependencies {
	deobfCompile "mezz.jei:jei_${mcversion}:${jei_version}"
//	deobfCompile "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
//	runtime "net.industrial-craft:industrialcraft-2:${ic2_version}:dev"
}

configurations {
	api
	compile.extendsFrom api
	shade
	compile.extendsFrom shade
}

processResources {

	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '**/*.md'
	}
}

runClient {
	if (project.hasProperty('mcUsername')) {
		args "--username=" + project.mcUsername
	}
	if (project.hasProperty('mcPassword')) {
		args "--password=" + project.mcPassword
	}
}

jar {
	destinationDir = file("build/tmp")
	archiveName = "main.jar"

	// Copy various READMEs and Licensing files into the jar
	into ('forestry/api') {
		from project.apiForestry + "/LICENSE.txt"
	}
	into ('cofh/api') {
		from project.apiRedstoneFlux + "/LICENSE - LGPLv3.txt"
	}
	into ('invtweaks/api') {
		from "./src/api/java/invtweaks/LICENSE.txt"
	}
	
	into ('buildcraft/api') {
		from "./src/api/java/buildcraft/LICENSE"
	}

	configurations.shade.each{ dep ->
		from(project.zipTree(dep)){
			exclude 'META-INF', 'META-INF/**', 'mcmod.info'
		}
	}
}

task mainJar(type: Jar, dependsOn: 'reobf') {
	from (zipTree(jar.getArchivePath())) {
		include '**'
	}

	destinationDir = file(dirDest)
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	includeEmptyDirs = false

	manifest{
		attributes 'TweakClass': 'forestry.shade.javacheck.Java7Checker'
	}
}

task devJar(type: Jar, dependsOn: 'classes') {
	from sourceSets.main.output

	destinationDir = file(dirDest)
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	includeEmptyDirs = false

	classifier = 'dev'
}

task apiJar(type: Jar, dependsOn: 'classes') {
	from project.apiForestry
	from(sourceSets.main.output) {
		include 'forestry/api/**'
	}

	destinationDir = file(dirDest)
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	includeEmptyDirs = false

	classifier = 'api'
}

task srcJar(type: Jar, dependsOn: 'classes') {
	from sourceSets.main.allSource

	destinationDir = file(dirDest)
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	includeEmptyDirs = false

	classifier = 'sources'
}

task release (dependsOn: [mainJar, apiJar, devJar, srcJar]) {
}

artifacts {
	archives apiJar
	archives devJar
	archives srcJar
}

uploadArchives {
	repositories {
		if (project.hasProperty('mavenDir')) {
			mavenDeployer {
				repository(url: "file://"+mavenDir)
				
				addFilter('api') { artifact, file ->
					file == apiJar.archivePath
				}
				addFilter('dev') { artifact, file ->
					file == devJar.archivePath
				}
				addFilter('sources') { artifact, file ->
					file == srcJar.archivePath
				}
			}
		} else {
			println 'Archives upload disabled, gradle.properties is missing.'
		}
	}
}

def getBuildNumber() {
	return "$System.env.BUILD_NUMBER" != "null" ? "$System.env.BUILD_NUMBER" : "0"
}


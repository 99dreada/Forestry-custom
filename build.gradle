buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

apply plugin: 'forge'

version = version_major + '.' + version_minor + '.' + version_patch + '.' + version_revision + '-' + version_build
group= "net.sengir.forestry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "forestry_" + mcversion

ext.dirDest = './build/dist'
ext.dirLang = "./lang"

ext.srcIc2Dir = "../IC2/src"
ext.srcCraftguideDir = "../CraftGuide/src"

ext.apiForestry = "./api/forestry"

minecraft {
	version = mcversion + "-" + forgeversion
	assetDir = "eclipse/assets"

	replace '@VERSION@', project.version
	replace '@BUILD_NUMBER@', project.version_build
	replace '$___$', rndString()
	replace '$____$', rndString()
	replace '$_____$', rndString()
	replace '$______$', rndString()
	replace '$_______$', rndString()
	replace '$________$', rndString()
	replace '$_________$', rndString()
	replace '$__________$', rndString()
}

sourceSets {
	main {
		java {
			srcDir project.srcCraftguideDir
			include '**/CraftGuide/api/**'

			srcDirs file('forestry_common').listFiles()
			include 'forestry/**'

			srcDir project.srcIc2Dir
			include '**/api/**'

			srcDir project.apiForestry
		}
		resources {
			srcDir 'forestry_resources'
			srcDir project.dirLang
		}
	}
}

configurations{
	buildcraft
	compile.extendsFrom buildcraft
}

dependencies {
	buildcraft 'com.mod-buildcraft:buildcraft:5.0.4.2942:dev'
}

processResources {
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '**/*.md'
	}
}

runClient {
	args "--username=${project.mcUsername}"
	args "--password=${project.mcPassword}"
}

debugClient {
	args "--username=${project.mcUsername}"
	args "--password=${project.mcPassword}"
}

task echoVersion << {
	printNextVersion()
}

def saveVersion() {
	ant.propertyfile(
		file: "gradle.properties") {
		entry( key:"version_major", type:"int", value: version_major)
		entry( key:"version_minor", type:"int", value: version_minor)
		entry( key:"version_patch", type:"int", value: version_patch)
		entry( key:"version_revision", type:"int", value: version_revision)
		entry( key:"version_build", type:"int", value: version_build)
	}
	project.version = version_major + '.' + version_minor + '.' + version_patch + '.' + version_revision + '-' + version_build
	printNextVersion()
}

def printNextVersion(){
	println '*************************************************************'
	println 'The next build will be version: ' +  project.version
	println '*************************************************************'
}

task bumpMajor << {
	project.version_major = Integer.parseInt(project.version_major) + 1
	project.version_minor = "0"
	project.version_patch = "0"
	project.version_revision = "0"
	saveVersion()
}

task bumpMinor << {
	project.version_minor = Integer.parseInt(project.version_minor) + 1
	project.version_patch = "0"
	project.version_revision = "0"
	saveVersion()
}

task bumpPatch << {
	project.version_patch = Integer.parseInt(project.version_patch) + 1
	project.version_revision = "0"
	saveVersion()
}

task bumpRevision << {
	project.version_revision = Integer.parseInt(project.version_revision) + 1
	saveVersion()
}

task bumpBuild << {
	project.version_build = Integer.parseInt(project.version_build) + 1
	saveVersion()
}

task setBuild << {
	def console = System.console()
	if (console) {
		project.version_build = console.readLine('> What should the build be? ')
	} else {
		logger.error "Cannot get console."
	}
	saveVersion()
}

jar {
	destinationDir = file("build/tmp")
	archiveName = "main.jar"

	from {
		configurations.buildcraft.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				include '**/api/**'
			}
		}
	}
}

task mainJarSigned ( type: Jar, dependsOn: 'reobf' ) {
	from (zipTree(jar.getArchivePath())) {
		exclude '**/api/**'
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	destinationDir = file("build/tmp")
	archiveName = "signed.jar"

	doLast {
		if (project.hasProperty('signingKeystore')) {
			ant.signjar(jar: getArchivePath(),
				alias: signingAlias,
				keystore: signingKeystore,
				storepass: signingStorepass)
		} else {
			println 'Signing disabled, gradle.properties is missing.'
		}
	}
}

task mainJar ( type: Zip, dependsOn: mainJarSigned ) {
	from (zipTree(mainJarSigned.getArchivePath())) {
		include '**'
	}

	from (zipTree(jar.getArchivePath())) {
		include '**'
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	destinationDir = file(dirDest)
	includeEmptyDirs = false
	extension = 'jar'
}

task devJarSigned ( type: Jar, dependsOn: 'classes' ) {
	from(sourceSets.main.output) {
		exclude '**/api/**'
	}

	destinationDir = file("build/tmp")
	archiveName = "signed-dev.jar"

	doLast {
		if (project.hasProperty('signingKeystore')) {
			ant.signjar(jar: getArchivePath(),
				alias: signingAlias,
				keystore: signingKeystore,
				storepass: signingStorepass)
		} else {
			println 'Signing disabled, gradle.properties is missing.'
		}
	}
}

task devJar ( type: Zip, dependsOn: devJarSigned ) {
	from (zipTree(devJarSigned.getArchivePath())) {
		include '**'
	}

	from(sourceSets.main.allSource) {
		include '**/api/**'
	}

	from(sourceSets.main.output) {
		include '**'
	}

	from {
		configurations.buildcraft.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				include '**/api/**'
			}
		}
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	destinationDir = file(dirDest)
	extension = 'jar'

	classifier = 'dev'
}

task apiZip ( type: Zip ) {
	from project.apiForestry
	destinationDir = file(dirDest)
	classifier = 'api'
	extension = 'zip'
}

task releaseInit << {
	println '*************************************************************'
	println 'This build will be version: ' +  project.version
	println '*************************************************************'
}

task release << {
	project.version_build = Integer.parseInt(project.version_build) + 1
	saveVersion()
}

release.dependsOn releaseInit, mainJar, devJar, apiZip
mainJar.shouldRunAfter releaseInit
devJar.shouldRunAfter releaseInit
apiZip.shouldRunAfter releaseInit

def rndString() {
	String AB = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	Random rnd = new Random()
	String ret = ""
	int max = rnd.nextInt(18) + 3

	for (int i = 0; i < max; i++) {
		ret += AB.charAt(rnd.nextInt(AB.length()))
	}

	int rndStart = rnd.nextInt(6) + 2
	rndStart = rndStart >= ret.length() - 4 ? 3 : rndStart;

	return ret.substring(0, rndStart).toLowerCase(Locale.ENGLISH) + ret.substring(rndStart)
}